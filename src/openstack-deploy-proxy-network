#!/bin/sh

set -e
set -x

. /usr/share/openstack-pkg-tools/pkgos_func

DO_EXIT=no
for i in $@ ; do
	case "${1}" in
	"--ext-host-min")
		if [ -z "${2}" ] ; then echo "Parameter for option --ext-host-min is missing" > /dev/stderr ; DO_EXIT="yes" ; fi
		EXT_HOST_MIN=$2
		shift
		shift
	;;
	"--ext-host-max")
		if [ -z "${2}" ] ; then echo "Parameter for option --ext-host-max is missing" > /dev/stderr ; DO_EXIT="yes" ; fi
		EXT_HOST_MAX=$2
		shift
		shift
	;;
	"--mgmt-ip-cidr")
		if [ -z "${2}" ] ; then echo "Parameter for option --mgmt-ip-cidr is missing" > /dev/stderr ; DO_EXIT="yes" ; fi
		MGMT_IP_CIDR=$2
		shift
		shift
	;;
	"--mgmt-if")
		if [ -z "${2}" ] ; then echo "Parameter for option --mgmt-if is missing" > /dev/stderr ; DO_EXIT="yes" ; fi
		MGMT_IF=$2
		shift
		shift
	;;
	"--local-ip")
		if [ -z "${2}" ] ; then echo "Parameter for option --mgmt-if is missing" > /dev/stderr ; DO_EXIT="yes" ; fi
		LOCAL_IP=$2
		shift
		shift
	;;
	esac
done


if [ "${DO_EXIT}" = "yes" ] ; then
	echo "Parameters not validated: will exit now!" > /dev/stderr
	exit 1
fi


prompt_for_mgmt_network () {
	if [ -z "${MGMT_IP_CIDR}" ] ; then
		echo -n "Please enter the IP of your management network [172.16.99.1/24]:"
		read MGMT_IP_CIDR
	fi
	if [ -z "${MGMT_IP_CIDR}" ] ; then
		MGMT_IP_CIDR=172.16.99.1/24
	fi
	MGMT_NET_CIDR=`ipcalc ${MGMT_IP_CIDR} | grep Network: | awk '{print $2}'`
	MGMT_NET=`echo ${MGMT_NET_CIDR} | cut -d'/' -f1`
	MGMT_IP=`echo ${MGMT_IP_CIDR} | cut -d'/' -f1`
	MGMT_MASK=`ipcalc ${MGMT_IP_CIDR} | grep Netmask: | awk '{print $2}'`
	if [ -z "${MGMT_IF}" ] ; then
		echo -n "Please enter the interface name for your MGNT net [eth1]:"
		read MGMT_IF
	fi
	if [ -z "${MGMT_IF}" ] ; then
		MGMT_IF=eth1
	fi
}

find_default_ip () {
	local DEFROUTE_IF
	apt-get install -y python-q-text-as-data
	if [ -r /etc/default/openstack-proxy-node-network ] ; then
		echo "===> Loading default IP configuration from /etc/default/openstack-proxy-node-network"
		. /etc/default/openstack-proxy-node-network
	else
		echo "===> Detecting current IP configuration"
		DEFROUTE_IF=`LC_ALL=C /sbin/route | grep default |awk -- '{ print $8 }' | cut -d" " -f1`
		if [ -n "${DEFROUTE_IF}" ] ; then
			DEFROUTE_IP=`LC_ALL=C ip addr show "${DEFROUTE_IF}" | grep inet | head -n 1 | awk '{print $2}' | cut -d/ -f1 | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'`
			if [ -n ${DEFROUTE_IP} ] ; then
				DEFROUTE_IP_CIDR=`LC_ALL=C ip addr show ${DEFROUTE_IF} | grep inet | head -n 1 | awk '{print $2}'`
				DEFROUTE_MASK=`ipcalc ${DEFROUTE_IP_CIDR} | grep Netmask: | awk '{print $2}'`
				DEFROUTE_GW=`LC_ALL=C /sbin/route -n | awk 'NR > 1 {print}' | q -H "SELECT Gateway FROM - WHERE Destination='0.0.0.0'"`
				echo "===> Founded the following network config: ${DEFROUTE_IP} netmask: ${DEFROUTE_MASK} gateway ${DEFROUTE_GW}"
				echo "===> Writing it in /etc/default/openstack-proxy-node-network"
				echo "# This file is used by /etc/init.d/openstack-proxy-node-network
# to setup networking at boot time. The goal of this script is to
# setup networking correctly in order to use tempest tests in a VM.
#
# So please do not report about correctness and policy compliance
# if you aren't providing patches to improve. It's OK if it is a bit
# hackish, the goal is just to run functional tempest tests

DEFROUTE_IP=${DEFROUTE_IP}
DEFROUTE_MASK=${DEFROUTE_MASK}
DEFROUTE_GW=${DEFROUTE_GW}
DEFROUTE_IP_CIDR=${DEFROUTE_IP_CIDR}

MGMT_IF=${MGMT_IF}

MGMT_NET=${MGMT_NET}
MGMT_NET_CIDR=${MGMT_NET_CIDR}
MGMT_IP=${MGMT_IP}
MGMT_MASK=${MGMT_MASK}
MGMT_IP_CIDR=${MGMT_IP_CIDR}

TENANT_NET=172.16.100.0
TENANT_NET_CIDR=172.16.100.0/24
" > /etc/default/openstack-proxy-node-network
			else
				echo "Could not find your default route IP address: exiting"
				exit 1
			fi
		fi
		. /etc/default/openstack-proxy-node-network
	fi
}

install_and_start_network_init_script () {
	echo "===> Installing OVS bridged network init script"
	cp /usr/share/openstack-deploy/openstack-proxy-node-network /etc/init.d
	chmod +x /etc/init.d/openstack-proxy-node-network
	update-rc.d openstack-proxy-node-network defaults
	echo "===> Starting OVS bridged network init script"
	nohup invoke-rc.d openstack-proxy-node-network start

	echo "===> Installing MGMT network NAT init script"
	cp /usr/share/openstack-deploy/openstack-proxy-node-nat /etc/init.d
	chmod +x /etc/init.d/openstack-proxy-node-nat
	update-rc.d openstack-proxy-node-nat defaults
	echo "===> Starting MGMT network NAT init script"
	invoke-rc.d openstack-proxy-node-nat start
}

pkgos_get_id () {
	SERVICE_ENDPOINT=${SERVICE_ENDPOINT:-http://127.0.0.1:35357/v2.0/} SERVICE_TOKEN=${AUTH_TOKEN} "$@" | awk '/ id / { print $4 }'
}

calc_host_min_max () {
	local DIGIT1 DIGIT2 DIGIT3 DIGIT4
	if [ -z "${EXT_HOST_MAX}" ] ; then
		EXT_HOST_MAX=`ipcalc ${DEFROUTE_IP_CIDR} | grep HostMax: | awk '{print $2}'`
	fi
	if [ -z "${EXT_HOST_MIN}" ] ; then
		DIGIT1=`echo ${DEFROUTE_IP} | cut -d. -f1`
		DIGIT2=`echo ${DEFROUTE_IP} | cut -d. -f2`
		DIGIT3=`echo ${DEFROUTE_IP} | cut -d. -f3`
		DIGIT4=`echo ${DEFROUTE_IP} | cut -d. -f4`
		DIGIT4=$(( ${DIGIT4} + 1))
		EXT_HOST_MIN="${DIGIT1}.${DIGIT2}.${DIGIT3}.${DIGIT4}"
	fi
	EXT_NET_CIDR=`ipcalc ${DEFROUTE_IP_CIDR} | grep Network: | awk '{print $2}'`
}

source_openrc_if_present () {
	if [ -r ~/openrc.sh ] ; then
		. ~/openrc.sh
	fi
}

setup_local_ip () {
	if [ -n "${LOCAL_IP}" ] ; then
		pkgos_inifile set /etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini ovs local_ip ${LOCAL_IP}
		invoke-rc.d neutron-plugin-openvswitch-agent restart
	fi
}

setup_neutron_networking () {
	# Map the existing physical network in Neutron
	neutron net-create ext-net --shared --router:external=True --provider:physical_network external --provider:network_type flat
	neutron subnet-create ext-net --name ext-subnet \
		--allocation-pool start=${EXT_HOST_MIN},end=${EXT_HOST_MAX} \
		--gateway ${DEFROUTE_GW} ${EXT_NET_CIDR} -- --enable_dhcp=False

	# Create the demo LAN
	LAN_NET=`pkgos_get_id neutron net-create demo-net`
	#LAN_SUBNET=`pkgos_get_id neutron subnet-create demo-net --name demo-subnet ${TENANT_NET_CIDR} -- --dns_nameservers list=true ${DEFROUTE_IP}`
	# Sylvain says this is enough, and I don't need to do what's above:
	LAN_SUBNET=`pkgos_get_id neutron subnet-create demo-net --name demo-subnet ${TENANT_NET_CIDR}`

	# Create the router
	neutron router-create demo-router

	# Attach the router on both sides
	# First attach the router to the demo tenant subnet:
	neutron router-interface-add demo-router demo-subnet

	# Attach the router to the external network by setting it as the gateway:
	neutron router-gateway-set demo-router ext-net
}

prompt_for_mgmt_network
find_default_ip
calc_host_min_max
install_and_start_network_init_script
source_openrc_if_present
setup_local_ip
setup_neutron_networking
